--source include/have_blackhole.inc
--source include/have_innodb.inc
--source include/have_partition.inc
--source include/master-slave.inc

# This testcase checks that the bug which caused replication into a partitioned
# BLACKHOLE table to stop if any other than the first partition was involved,
# is no longer a bug.

call mtr.add_suppression(".*read free replication is disabled for table.*continue with rows lookup");

--source include/rpl_connection_master.inc
# Source table needs to have at least two partitions and no indexes.
CREATE TABLE t1(id INT)
    Engine=InnoDB PARTITION BY RANGE (id)
    (PARTITION p1 VALUES LESS THAN (10),
     PARTITION p2 VALUES LESS THAN MAXVALUE);

--source include/sync_slave_sql_with_master.inc

# Replicating into a BLACKHOLE table.
ALTER TABLE t1 ENGINE=BLACKHOLE;

--source include/rpl_connection_master.inc
# All partitions need to have some data in them.
INSERT INTO t1 (id) VALUES (1), (5), (9), (13), (17);

# Delete operation needs to do something in the second partition. Without
# indexes this command will use table scans to find all affected rows.
DELETE FROM t1 WHERE id > 4 AND id < 15;

# Now try to touch the second partition with an UPDATE.
UPDATE t1 SET id = 18 WHERE id = 17;

--source include/sync_slave_sql_with_master.inc

# Replica should successfully process DELETEs and UPDATEs from a source
# instance.
--source include/check_slave_is_running.inc

--source include/rpl_connection_master.inc
DROP TABLE t1;

--source include/sync_slave_sql_with_master.inc

--source include/rpl_end.inc
